Phase: Person_Name_Recognition
Input: Lookup Token SpaceToken
Options: control = appelt

Macro: PERSON_NAME_PART
(
  {Token.string ==~ "[A-Z][A-Za-z]+"}
)

Macro: INITIALS_PATTERN_1
(
  {Token.string ==~ "[A-Z]"}
  {Token.string == "."}
)

Macro: INITIALS_PATTERN_2
(
  {Token.string ==~ "[A-Z]"}
  ({Token.string == "."})
  {Token.string ==~ "[A-Z]"}
  ({Token.string == "."})
)

Macro: INITIALS_PATTERN_3
(
  {Token.string ==~ "[A-Z]"}
  ({Token.string == "."})
  {Token.string ==~ "[A-Z]"}
  ({Token.string == "."})
  {Token.string ==~ "[A-Z]?"}
  {Token.string == "."}
)

Macro: INITIALS_PATTERN_4
(
  {Token.string ==~ "[A-Z]{2,2}"}
  ({Token.string == "."})?
)

Macro: PERSON_INITIALS
(
  (INITIALS_PATTERN_1 | INITIALS_PATTERN_2 | INITIALS_PATTERN_3 | INITIALS_PATTERN_4)
)

Macro: INITIALS_TOKEN
(
  ({Token.string == ","})?
  ({SpaceToken})+
  (PERSON_INITIALS)
)

// Cardona, P.J., Crew III, Peters and Carpinello, JJ., concur

Rule: PersonName_Initials_Ending
(
  (PERSON_NAME_PART)
  (INITIALS_TOKEN)?
  (
    ({SpaceToken})+
    ({Lookup.majorType == "person_ending"})
  )?
):person_name_match
-->
:person_name_match.PersonName = {rule = "PersonName_Initials_Ending"}


Rule: PersonName_Initials_Middle
(
  (PERSON_NAME_PART)
  (INITIALS_TOKEN)?
  ({SpaceToken})+
  (PERSON_NAME_PART)
):person_name_match
-->
  :person_name_match.PersonName = {rule = "PersonName_Initials_Middle"}


Rule: PersonName_Triple
(
  (PERSON_NAME_PART)
  ({SpaceToken})+
  (PERSON_NAME_PART)
  ({SpaceToken})+
  (PERSON_NAME_PART)
):person_name_match
-->
  :person_name_match.PersonName = {rule = "PersonName_Triple"}
